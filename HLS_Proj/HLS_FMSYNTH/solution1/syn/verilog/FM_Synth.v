// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="FM_Synth,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485tffg1157-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.090900,HLS_SYN_LAT=62,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=18,HLS_SYN_FF=6804,HLS_SYN_LUT=6598}" *)

module FM_Synth (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        result_V_TDATA,
        result_V_TVALID,
        result_V_TREADY,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP
);

parameter    ap_ST_fsm_state1 = 141'd1;
parameter    ap_ST_fsm_state2 = 141'd2;
parameter    ap_ST_fsm_state3 = 141'd4;
parameter    ap_ST_fsm_state4 = 141'd8;
parameter    ap_ST_fsm_state5 = 141'd16;
parameter    ap_ST_fsm_state6 = 141'd32;
parameter    ap_ST_fsm_state7 = 141'd64;
parameter    ap_ST_fsm_state8 = 141'd128;
parameter    ap_ST_fsm_state9 = 141'd256;
parameter    ap_ST_fsm_state10 = 141'd512;
parameter    ap_ST_fsm_state11 = 141'd1024;
parameter    ap_ST_fsm_state12 = 141'd2048;
parameter    ap_ST_fsm_state13 = 141'd4096;
parameter    ap_ST_fsm_state14 = 141'd8192;
parameter    ap_ST_fsm_state15 = 141'd16384;
parameter    ap_ST_fsm_state16 = 141'd32768;
parameter    ap_ST_fsm_state17 = 141'd65536;
parameter    ap_ST_fsm_state18 = 141'd131072;
parameter    ap_ST_fsm_state19 = 141'd262144;
parameter    ap_ST_fsm_state20 = 141'd524288;
parameter    ap_ST_fsm_state21 = 141'd1048576;
parameter    ap_ST_fsm_state22 = 141'd2097152;
parameter    ap_ST_fsm_state23 = 141'd4194304;
parameter    ap_ST_fsm_state24 = 141'd8388608;
parameter    ap_ST_fsm_state25 = 141'd16777216;
parameter    ap_ST_fsm_state26 = 141'd33554432;
parameter    ap_ST_fsm_state27 = 141'd67108864;
parameter    ap_ST_fsm_state28 = 141'd134217728;
parameter    ap_ST_fsm_state29 = 141'd268435456;
parameter    ap_ST_fsm_state30 = 141'd536870912;
parameter    ap_ST_fsm_state31 = 141'd1073741824;
parameter    ap_ST_fsm_state32 = 141'd2147483648;
parameter    ap_ST_fsm_state33 = 141'd4294967296;
parameter    ap_ST_fsm_state34 = 141'd8589934592;
parameter    ap_ST_fsm_state35 = 141'd17179869184;
parameter    ap_ST_fsm_state36 = 141'd34359738368;
parameter    ap_ST_fsm_state37 = 141'd68719476736;
parameter    ap_ST_fsm_state38 = 141'd137438953472;
parameter    ap_ST_fsm_state39 = 141'd274877906944;
parameter    ap_ST_fsm_state40 = 141'd549755813888;
parameter    ap_ST_fsm_state41 = 141'd1099511627776;
parameter    ap_ST_fsm_state42 = 141'd2199023255552;
parameter    ap_ST_fsm_state43 = 141'd4398046511104;
parameter    ap_ST_fsm_state44 = 141'd8796093022208;
parameter    ap_ST_fsm_state45 = 141'd17592186044416;
parameter    ap_ST_fsm_state46 = 141'd35184372088832;
parameter    ap_ST_fsm_state47 = 141'd70368744177664;
parameter    ap_ST_fsm_state48 = 141'd140737488355328;
parameter    ap_ST_fsm_state49 = 141'd281474976710656;
parameter    ap_ST_fsm_state50 = 141'd562949953421312;
parameter    ap_ST_fsm_state51 = 141'd1125899906842624;
parameter    ap_ST_fsm_state52 = 141'd2251799813685248;
parameter    ap_ST_fsm_state53 = 141'd4503599627370496;
parameter    ap_ST_fsm_state54 = 141'd9007199254740992;
parameter    ap_ST_fsm_state55 = 141'd18014398509481984;
parameter    ap_ST_fsm_state56 = 141'd36028797018963968;
parameter    ap_ST_fsm_state57 = 141'd72057594037927936;
parameter    ap_ST_fsm_state58 = 141'd144115188075855872;
parameter    ap_ST_fsm_state59 = 141'd288230376151711744;
parameter    ap_ST_fsm_state60 = 141'd576460752303423488;
parameter    ap_ST_fsm_state61 = 141'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 141'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 141'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 141'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 141'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 141'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 141'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 141'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 141'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 141'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 141'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 141'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 141'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 141'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 141'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 141'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 141'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 141'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 141'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 141'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 141'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 141'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 141'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 141'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 141'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 141'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 141'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 141'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 141'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 141'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 141'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 141'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 141'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 141'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 141'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 141'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 141'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 141'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 141'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 141'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 141'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 141'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 141'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 141'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 141'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 141'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 141'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 141'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 141'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 141'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 141'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 141'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 141'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 141'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 141'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 141'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 141'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 141'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 141'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 141'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 141'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 141'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 141'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 141'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 141'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 141'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 141'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 141'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 141'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 141'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 141'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 141'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 141'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 141'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 141'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 141'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 141'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 141'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 141'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 141'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 141'd1393796574908163946345982392040522594123776;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] result_V_TDATA;
output   result_V_TVALID;
input   result_V_TREADY;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [140:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] result_V_1_data_out;
reg    result_V_1_vld_in;
wire    result_V_1_vld_out;
wire    result_V_1_ack_in;
wire    result_V_1_ack_out;
reg   [31:0] result_V_1_payload_A;
reg   [31:0] result_V_1_payload_B;
reg    result_V_1_sel_rd;
reg    result_V_1_sel_wr;
wire    result_V_1_sel;
wire    result_V_1_load_A;
wire    result_V_1_load_B;
reg   [1:0] result_V_1_state;
wire    result_V_1_state_cmp_full;
wire   [31:0] modulator_wave;
wire   [31:0] modulator_phase;
wire   [31:0] scale_factor;
wire   [31:0] carrier_wave;
wire   [31:0] carrier_phase;
wire   [31:0] sync;
reg   [31:0] change;
reg   [31:0] position;
reg   [28:0] mod_octave;
reg   [28:0] car_octave;
wire   [3:0] sizes_address0;
reg    sizes_ce0;
wire   [8:0] sizes_q0;
wire   [3:0] sizes_address1;
reg    sizes_ce1;
wire   [8:0] sizes_q1;
reg   [8:0] mod_size;
reg   [8:0] car_size;
reg   [13:0] carrier_wave_values_s;
wire   [3:0] Conversion_address0;
reg    Conversion_ce0;
wire   [31:0] Conversion_q0;
wire   [3:0] Conversion_address1;
reg    Conversion_ce1;
wire   [31:0] Conversion_q1;
reg   [31:0] carrier_conversion;
reg   [13:0] modulator_wave_value;
reg   [31:0] modulator_conversion;
reg   [5:0] mask_table1_address0;
reg    mask_table1_ce0;
wire   [51:0] mask_table1_q0;
reg   [12:0] notes_address0;
reg    notes_ce0;
wire   [31:0] notes_q0;
reg    result_V_TDATA_blk_n;
wire    ap_CS_fsm_state140;
wire    ap_CS_fsm_state141;
reg   [0:0] tmp_s_reg_1590;
wire   [31:0] grp_fu_322_p2;
reg   [31:0] reg_337;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state100;
wire   [31:0] grp_fu_330_p1;
reg   [31:0] reg_344;
wire    ap_CS_fsm_state98;
wire   [31:0] grp_fu_318_p2;
reg   [31:0] reg_350;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state94;
wire   [63:0] grp_fu_334_p1;
reg   [63:0] reg_356;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state101;
reg   [31:0] reg_360;
wire    ap_CS_fsm_state86;
reg   [31:0] carrier_phase_read_reg_1565;
reg   [31:0] scale_factor_read_reg_1575;
reg   [31:0] modulator_phase_read_reg_1580;
wire   [0:0] tmp_s_fu_366_p2;
wire   [64:0] mul2_fu_394_p2;
reg   [64:0] mul2_reg_1602;
wire   [0:0] tmp_2_fu_380_p2;
reg   [0:0] tmp_1_reg_1607;
reg   [28:0] tmp_5_reg_1613;
wire   [64:0] mul_fu_422_p2;
reg   [64:0] mul_reg_1619;
reg   [0:0] tmp_17_reg_1624;
reg   [28:0] tmp_26_reg_1630;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state39;
wire  signed [31:0] tmp_31_fu_623_p1;
wire    ap_CS_fsm_state42;
reg   [31:0] tmp_11_reg_1666;
reg   [0:0] p_Result_s_reg_1671;
reg   [10:0] loc_V_reg_1680;
wire   [51:0] loc_V_1_fu_650_p1;
reg   [51:0] loc_V_1_reg_1688;
wire   [62:0] tmp_34_fu_669_p1;
reg   [62:0] tmp_34_reg_1699;
wire   [63:0] x_assign_1_fu_837_p3;
reg   [63:0] x_assign_1_reg_1704;
wire    ap_CS_fsm_state48;
reg   [0:0] p_Result_43_reg_1709;
wire    ap_CS_fsm_state49;
wire   [30:0] p_Val2_11_fu_966_p3;
reg   [30:0] p_Val2_11_reg_1714;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state89;
wire   [31:0] grp_fu_326_p2;
reg   [31:0] tmp_21_reg_1740;
wire  signed [31:0] tmp_35_fu_1085_p1;
wire    ap_CS_fsm_state96;
reg   [0:0] p_Result_23_reg_1750;
reg   [10:0] loc_V_6_reg_1759;
wire   [51:0] loc_V_7_fu_1112_p1;
reg   [51:0] loc_V_7_reg_1767;
wire   [62:0] tmp_47_fu_1131_p1;
reg   [62:0] tmp_47_reg_1778;
wire   [63:0] x_assign_3_fu_1299_p3;
reg   [63:0] x_assign_3_reg_1783;
wire    ap_CS_fsm_state102;
reg   [0:0] p_Result_48_reg_1788;
wire    ap_CS_fsm_state103;
wire   [30:0] p_Val2_26_fu_1428_p3;
reg   [30:0] p_Val2_26_reg_1793;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state139;
reg   [31:0] position_loc_reg_294;
wire    ap_CS_fsm_state37;
reg   [0:0] storemerge_phi_fu_310_p4;
reg   [0:0] storemerge_reg_306;
reg    ap_block_state141_io;
wire  signed [63:0] tmp_8_fu_548_p1;
wire  signed [63:0] tmp_10_fu_558_p1;
wire   [63:0] tmp_6_i_fu_664_p1;
wire  signed [63:0] gepindex2_cast_fu_1070_p1;
wire   [63:0] tmp_6_i1_fu_1126_p1;
wire  signed [63:0] gepindex271_cast_fu_1532_p1;
wire   [31:0] storemerge_cast_fu_1537_p1;
wire   [31:0] tmp_27_fu_602_p2;
wire    ap_CS_fsm_state38;
wire   [28:0] tmp_4_fu_491_p2;
wire    ap_CS_fsm_state2;
wire   [28:0] tmp_6_fu_536_p2;
wire  signed [13:0] grp_fu_1556_p3;
wire  signed [13:0] grp_fu_1547_p3;
reg   [31:0] grp_fu_318_p0;
reg   [31:0] grp_fu_318_p1;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state95;
reg   [31:0] grp_fu_322_p0;
reg   [31:0] grp_fu_322_p1;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state99;
reg   [31:0] grp_fu_330_p0;
wire   [1:0] tmp_fu_376_p1;
wire  signed [31:0] mul2_fu_394_p1;
wire  signed [31:0] mul_fu_422_p1;
wire   [4:0] grp_fu_446_p1;
wire   [4:0] grp_fu_452_p1;
wire   [64:0] neg_mul3_fu_458_p2;
wire   [28:0] tmp_3_fu_463_p4;
wire   [28:0] p_v_v_fu_473_p3;
wire   [28:0] neg_ti8_fu_479_p2;
wire   [28:0] tmp_16_fu_485_p3;
wire   [64:0] neg_mul_fu_503_p2;
wire   [28:0] tmp_25_fu_508_p4;
wire   [28:0] p_v9_v_fu_518_p3;
wire   [28:0] neg_ti_fu_524_p2;
wire   [28:0] tmp_28_fu_530_p3;
wire   [31:0] grp_fu_446_p2;
wire   [31:0] grp_fu_452_p2;
wire   [63:0] p_Val2_s_fu_628_p1;
wire   [5:0] index_V_fu_654_p4;
wire   [0:0] tmp_4_i_fu_683_p2;
wire   [0:0] tmp_9_i_fu_688_p2;
wire   [63:0] p_Result_39_fu_703_p3;
wire   [63:0] mask_i_cast_fu_699_p1;
wire   [63:0] p_Result_40_fu_714_p3;
wire   [63:0] p_Val2_5_fu_721_p2;
wire   [10:0] loc_V_2_fu_735_p4;
wire   [0:0] p_Result_41_fu_727_p3;
wire   [51:0] loc_V_3_fu_745_p1;
wire   [51:0] xs_sig_V_1_fu_760_p3;
wire   [51:0] tmp_5_i_fu_766_p2;
wire   [0:0] xs_sign_V_9_fu_755_p2;
wire   [10:0] xs_exp_V_7_fu_749_p3;
wire   [51:0] xs_sig_V_fu_772_p2;
wire   [63:0] p_Result_42_fu_778_p4;
wire   [0:0] or_cond_i_fu_693_p2;
wire   [0:0] sel_tmp_i_fu_792_p2;
wire   [0:0] tmp_i_fu_673_p2;
wire   [0:0] sel_tmp1_i_fu_797_p2;
wire   [63:0] ret_i_i_i_i_fu_710_p1;
wire   [0:0] tmp_3_i_fu_678_p2;
wire   [0:0] sel_tmp5_demorgan_i_fu_811_p2;
wire   [63:0] sel_tmp2_i_fu_803_p3;
wire   [63:0] ret_i_i_i_fu_788_p1;
wire   [0:0] sel_tmp7_i_fu_825_p2;
wire   [0:0] sel_tmp8_i_fu_831_p2;
wire   [63:0] sel_tmp6_i_fu_817_p3;
wire   [63:0] p_Val2_9_fu_845_p1;
wire   [51:0] loc_V_5_fu_866_p1;
wire   [53:0] tmp_i_i_i_fu_870_p4;
wire   [10:0] loc_V_4_fu_856_p4;
wire   [11:0] tmp_i_i_i_i_cast_fu_884_p1;
wire   [11:0] sh_assign_fu_888_p2;
wire   [10:0] tmp_13_i_i_i_fu_902_p2;
wire   [0:0] isNeg_fu_894_p3;
wire  signed [11:0] tmp_13_i_i_i_cast_fu_908_p1;
wire   [11:0] sh_assign_1_fu_912_p3;
wire  signed [31:0] sh_assign_1_cast_fu_920_p1;
wire   [53:0] tmp_14_i_i_i_cast_fu_928_p1;
wire   [136:0] tmp_i_i_i_cast_fu_880_p1;
wire   [136:0] tmp_14_i_i_i_fu_924_p1;
wire   [53:0] tmp_15_i_i_i_fu_932_p2;
wire   [0:0] tmp_40_fu_944_p3;
wire   [136:0] tmp_16_i_i_i_fu_938_p2;
wire   [30:0] tmp_32_fu_952_p1;
wire   [30:0] tmp_33_fu_956_p4;
wire   [31:0] tmp_18_i_i_i_fu_974_p1;
wire   [31:0] tmp_21_i_i_i_fu_977_p2;
wire   [31:0] grp_fu_998_p0;
wire   [9:0] grp_fu_998_p1;
wire   [13:0] grp_fu_998_p2;
wire   [13:0] tmp_41_fu_1004_p1;
wire   [13:0] mem_index_gep2_fu_1012_p2;
wire  signed [15:0] mem_index_gep16_cast_fu_1018_p1;
wire   [11:0] tmp_42_fu_1026_p4;
wire   [16:0] adjSize61_cast_fu_1022_p1;
wire   [0:0] icmp_fu_1036_p2;
wire   [16:0] gepindex_fu_1048_p2;
wire   [0:0] addrCmp_fu_1042_p2;
wire   [16:0] gepindex1_fu_1054_p3;
wire   [16:0] gepindex2_fu_1062_p3;
wire   [63:0] p_Val2_16_fu_1090_p1;
wire   [5:0] index_V_1_fu_1116_p4;
wire   [0:0] tmp_4_i7_fu_1145_p2;
wire   [0:0] tmp_9_i8_fu_1150_p2;
wire   [63:0] p_Result_44_fu_1165_p3;
wire   [63:0] mask_i13_cast_fu_1161_p1;
wire   [63:0] p_Result_45_fu_1176_p3;
wire   [63:0] p_Val2_20_fu_1183_p2;
wire   [10:0] loc_V_8_fu_1197_p4;
wire   [0:0] p_Result_46_fu_1189_p3;
wire   [51:0] loc_V_9_fu_1207_p1;
wire   [51:0] xs_sig_V_4_fu_1222_p3;
wire   [51:0] tmp_5_i1_fu_1228_p2;
wire   [0:0] xs_sign_V_10_fu_1217_p2;
wire   [10:0] xs_exp_V_8_fu_1211_p3;
wire   [51:0] xs_sig_V_9_fu_1234_p2;
wire   [63:0] p_Result_47_fu_1240_p4;
wire   [0:0] or_cond_i9_fu_1155_p2;
wire   [0:0] sel_tmp_i1_fu_1254_p2;
wire   [0:0] tmp_i5_fu_1135_p2;
wire   [0:0] sel_tmp1_i1_fu_1259_p2;
wire   [63:0] ret_i_i_i_i1_fu_1172_p1;
wire   [0:0] tmp_3_i6_fu_1140_p2;
wire   [0:0] sel_tmp5_demorgan_i1_fu_1273_p2;
wire   [63:0] sel_tmp2_i1_fu_1265_p3;
wire   [63:0] ret_i_i_i1_fu_1250_p1;
wire   [0:0] sel_tmp7_i1_fu_1287_p2;
wire   [0:0] sel_tmp8_i1_fu_1293_p2;
wire   [63:0] sel_tmp6_i1_fu_1279_p3;
wire   [63:0] p_Val2_24_fu_1307_p1;
wire   [51:0] loc_V_11_fu_1328_p1;
wire   [53:0] tmp_i_i_i8_fu_1332_p4;
wire   [10:0] loc_V_10_fu_1318_p4;
wire   [11:0] tmp_i_i_i_i9_cast_fu_1346_p1;
wire   [11:0] sh_assign_2_fu_1350_p2;
wire   [10:0] tmp_13_i_i_i1_fu_1364_p2;
wire   [0:0] isNeg_1_fu_1356_p3;
wire  signed [11:0] tmp_13_i_i_i1_cast_fu_1370_p1;
wire   [11:0] sh_assign_3_fu_1374_p3;
wire  signed [31:0] sh_assign_3_cast_fu_1382_p1;
wire   [53:0] tmp_14_i_i_i1_cast_fu_1390_p1;
wire   [136:0] tmp_i_i_i8_cast_fu_1342_p1;
wire   [136:0] tmp_14_i_i_i1_fu_1386_p1;
wire   [53:0] tmp_15_i_i_i1_fu_1394_p2;
wire   [0:0] tmp_53_fu_1406_p3;
wire   [136:0] tmp_16_i_i_i1_fu_1400_p2;
wire   [30:0] tmp_36_fu_1414_p1;
wire   [30:0] tmp_37_fu_1418_p4;
wire   [31:0] tmp_18_i_i_i1_fu_1436_p1;
wire   [31:0] tmp_21_i_i_i1_fu_1439_p2;
wire   [31:0] grp_fu_1460_p0;
wire   [9:0] grp_fu_1460_p1;
wire   [13:0] grp_fu_1460_p2;
wire   [13:0] tmp_54_fu_1466_p1;
wire   [13:0] mem_index_gep3_fu_1474_p2;
wire  signed [15:0] mem_index_gep19_cast_fu_1480_p1;
wire   [11:0] tmp_55_fu_1488_p4;
wire   [16:0] adjSize65_cast_fu_1484_p1;
wire   [0:0] icmp1_fu_1498_p2;
wire   [16:0] gepindex3_fu_1510_p2;
wire   [0:0] addrCmp1_fu_1504_p2;
wire   [16:0] gepindex4_fu_1516_p3;
wire   [16:0] gepindex5_fu_1524_p3;
wire   [9:0] grp_fu_1547_p0;
wire  signed [13:0] grp_fu_1547_p1;
wire   [3:0] grp_fu_1547_p2;
wire   [9:0] grp_fu_1556_p0;
wire  signed [13:0] grp_fu_1556_p1;
wire   [3:0] grp_fu_1556_p2;
reg    grp_fu_446_ap_start;
wire    grp_fu_446_ap_done;
reg    grp_fu_452_ap_start;
wire    grp_fu_452_ap_done;
reg    grp_fu_998_ap_start;
wire    grp_fu_998_ap_done;
reg    grp_fu_1460_ap_start;
wire    grp_fu_1460_ap_done;
reg   [140:0] ap_NS_fsm;
wire   [31:0] grp_fu_1460_p10;
wire   [31:0] grp_fu_998_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 141'd1;
#0 result_V_1_sel_rd = 1'b0;
#0 result_V_1_sel_wr = 1'b0;
#0 result_V_1_state = 2'd0;
#0 change = 32'd1;
#0 position = 32'd0;
#0 mod_octave = 29'd0;
#0 car_octave = 29'd0;
#0 mod_size = 9'd0;
#0 car_size = 9'd0;
#0 carrier_wave_values_s = 14'd0;
#0 carrier_conversion = 32'd0;
#0 modulator_wave_value = 14'd0;
#0 modulator_conversion = 32'd0;
end

FM_Synth_sizes #(
    .DataWidth( 9 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
sizes_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sizes_address0),
    .ce0(sizes_ce0),
    .q0(sizes_q0),
    .address1(sizes_address1),
    .ce1(sizes_ce1),
    .q1(sizes_q1)
);

FM_Synth_Conversion #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
Conversion_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Conversion_address0),
    .ce0(Conversion_ce0),
    .q0(Conversion_q0),
    .address1(Conversion_address1),
    .ce1(Conversion_ce1),
    .q1(Conversion_q1)
);

FM_Synth_mask_tabbkb #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mask_table1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mask_table1_address0),
    .ce0(mask_table1_ce0),
    .q0(mask_table1_q0)
);

FM_Synth_notes #(
    .DataWidth( 32 ),
    .AddressRange( 5244 ),
    .AddressWidth( 13 ))
notes_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(notes_address0),
    .ce0(notes_ce0),
    .q0(notes_q0)
);

FM_Synth_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
FM_Synth_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .modulator_wave(modulator_wave),
    .modulator_phase(modulator_phase),
    .scale_factor(scale_factor),
    .carrier_wave(carrier_wave),
    .carrier_phase(carrier_phase),
    .sync(sync)
);

FM_Synth_fadd_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FM_Synth_fadd_32ncud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_318_p0),
    .din1(grp_fu_318_p1),
    .ce(1'b1),
    .dout(grp_fu_318_p2)
);

FM_Synth_fmul_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FM_Synth_fmul_32ndEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_322_p0),
    .din1(grp_fu_322_p1),
    .ce(1'b1),
    .dout(grp_fu_322_p2)
);

FM_Synth_fmul_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FM_Synth_fmul_32ndEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(carrier_conversion),
    .din1(carrier_phase_read_reg_1565),
    .ce(1'b1),
    .dout(grp_fu_326_p2)
);

FM_Synth_sitofp_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FM_Synth_sitofp_3eOg_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_330_p0),
    .ce(1'b1),
    .dout(grp_fu_330_p1)
);

FM_Synth_fpext_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
FM_Synth_fpext_32fYi_U5(
    .din0(reg_337),
    .dout(grp_fu_334_p1)
);

FM_Synth_srem_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
FM_Synth_srem_32ng8j_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_446_ap_start),
    .done(grp_fu_446_ap_done),
    .din0(modulator_wave),
    .din1(grp_fu_446_p1),
    .ce(1'b1),
    .dout(grp_fu_446_p2)
);

FM_Synth_srem_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
FM_Synth_srem_32ng8j_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_452_ap_start),
    .done(grp_fu_452_ap_done),
    .din0(carrier_wave),
    .din1(grp_fu_452_p1),
    .ce(1'b1),
    .dout(grp_fu_452_p2)
);

FM_Synth_srem_32nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 14 ))
FM_Synth_srem_32nhbi_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_998_ap_start),
    .done(grp_fu_998_ap_done),
    .din0(grp_fu_998_p0),
    .din1(grp_fu_998_p1),
    .ce(1'b1),
    .dout(grp_fu_998_p2)
);

FM_Synth_srem_32nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 14 ))
FM_Synth_srem_32nhbi_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1460_ap_start),
    .done(grp_fu_1460_ap_done),
    .din0(grp_fu_1460_p0),
    .din1(grp_fu_1460_p1),
    .ce(1'b1),
    .dout(grp_fu_1460_p2)
);

FM_Synth_mac_mulaibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 14 ))
FM_Synth_mac_mulaibs_U10(
    .din0(grp_fu_1547_p0),
    .din1(grp_fu_1547_p1),
    .din2(grp_fu_1547_p2),
    .dout(grp_fu_1547_p3)
);

FM_Synth_mac_mulaibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 14 ))
FM_Synth_mac_mulaibs_U11(
    .din0(grp_fu_1556_p0),
    .din1(grp_fu_1556_p1),
    .din2(grp_fu_1556_p2),
    .dout(grp_fu_1556_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        result_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == result_V_1_ack_out) & (1'b1 == result_V_1_vld_out))) begin
            result_V_1_sel_rd <= ~result_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        result_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == result_V_1_vld_in) & (1'b1 == result_V_1_ack_in))) begin
            result_V_1_sel_wr <= ~result_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        result_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == result_V_1_vld_in) & (1'b1 == result_V_1_ack_out) & (result_V_1_state == 2'd3)) | ((1'b0 == result_V_1_vld_in) & (result_V_1_state == 2'd2)))) begin
            result_V_1_state <= 2'd2;
        end else if ((((1'b1 == result_V_1_vld_in) & (1'b0 == result_V_1_ack_out) & (result_V_1_state == 2'd3)) | ((1'b0 == result_V_1_ack_out) & (result_V_1_state == 2'd1)))) begin
            result_V_1_state <= 2'd1;
        end else if ((((1'b1 == result_V_1_vld_in) & (result_V_1_state == 2'd2)) | ((1'b1 == result_V_1_ack_out) & (result_V_1_state == 2'd1)) | ((result_V_1_state == 2'd3) & ~((1'b1 == result_V_1_vld_in) & (1'b0 == result_V_1_ack_out)) & ~((1'b0 == result_V_1_vld_in) & (1'b1 == result_V_1_ack_out))))) begin
            result_V_1_state <= 2'd3;
        end else begin
            result_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'd0 == tmp_s_fu_366_p2) & (1'd0 == tmp_2_fu_380_p2))) begin
        position_loc_reg_294 <= position;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        position_loc_reg_294 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'd1 == tmp_s_fu_366_p2))) begin
        storemerge_reg_306 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state141) & (1'd0 == tmp_s_reg_1590) & ~((1'b0 == result_V_1_ack_in) | (1'b1 == ap_block_state141_io)))) begin
        storemerge_reg_306 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        car_octave <= tmp_6_fu_536_p2;
        mod_octave <= tmp_4_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        car_size <= sizes_q1;
        carrier_conversion <= Conversion_q0;
        mod_size <= sizes_q0;
        modulator_conversion <= Conversion_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        carrier_phase_read_reg_1565 <= carrier_phase;
        modulator_phase_read_reg_1580 <= modulator_phase;
        scale_factor_read_reg_1575 <= scale_factor;
        tmp_s_reg_1590 <= tmp_s_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        carrier_wave_values_s <= grp_fu_1556_p3;
        modulator_wave_value <= grp_fu_1547_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state141) & ~((1'b0 == result_V_1_ack_in) | (1'b1 == ap_block_state141_io)))) begin
        change[0] <= storemerge_cast_fu_1537_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        loc_V_1_reg_1688 <= loc_V_1_fu_650_p1;
        loc_V_reg_1680 <= {{p_Val2_s_fu_628_p1[62:52]}};
        p_Result_s_reg_1671 <= p_Val2_s_fu_628_p1[32'd63];
        tmp_34_reg_1699 <= tmp_34_fu_669_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        loc_V_6_reg_1759 <= {{p_Val2_16_fu_1090_p1[62:52]}};
        loc_V_7_reg_1767 <= loc_V_7_fu_1112_p1;
        p_Result_23_reg_1750 <= p_Val2_16_fu_1090_p1[32'd63];
        tmp_47_reg_1778 <= tmp_47_fu_1131_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'd0 == tmp_s_fu_366_p2) & (1'd1 == tmp_2_fu_380_p2))) begin
        mul2_reg_1602 <= mul2_fu_394_p2;
        mul_reg_1619 <= mul_fu_422_p2;
        tmp_17_reg_1624 <= carrier_wave[32'd31];
        tmp_1_reg_1607 <= modulator_wave[32'd31];
        tmp_26_reg_1630 <= {{mul_fu_422_p2[64:36]}};
        tmp_5_reg_1613 <= {{mul2_fu_394_p2[64:36]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        p_Result_43_reg_1709 <= p_Val2_9_fu_845_p1[32'd63];
        p_Val2_11_reg_1714 <= p_Val2_11_fu_966_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        p_Result_48_reg_1788 <= p_Val2_24_fu_1307_p1[32'd63];
        p_Val2_26_reg_1793 <= p_Val2_26_fu_1428_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        position <= tmp_27_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state100))) begin
        reg_337 <= grp_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state98))) begin
        reg_344 <= grp_fu_330_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state94))) begin
        reg_350 <= grp_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state101))) begin
        reg_356 <= grp_fu_334_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state86) | ((1'b1 == ap_CS_fsm_state140) & (result_V_1_ack_in == 1'b1)))) begin
        reg_360 <= notes_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == result_V_1_load_A)) begin
        result_V_1_payload_A <= notes_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == result_V_1_load_B)) begin
        result_V_1_payload_B <= notes_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        tmp_11_reg_1666 <= grp_fu_330_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        tmp_21_reg_1740 <= grp_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        x_assign_1_reg_1704 <= x_assign_1_fu_837_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        x_assign_3_reg_1783 <= x_assign_3_fu_1299_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        Conversion_ce0 = 1'b1;
    end else begin
        Conversion_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        Conversion_ce1 = 1'b1;
    end else begin
        Conversion_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state141) & ~((1'b0 == result_V_1_ack_in) | (1'b1 == ap_block_state141_io)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state141) & ~((1'b0 == result_V_1_ack_in) | (1'b1 == ap_block_state141_io)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        grp_fu_1460_ap_start = 1'b1;
    end else begin
        grp_fu_1460_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        grp_fu_318_p0 = reg_350;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state91))) begin
        grp_fu_318_p0 = reg_337;
    end else begin
        grp_fu_318_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        grp_fu_318_p1 = tmp_21_reg_1740;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state95))) begin
        grp_fu_318_p1 = reg_344;
    end else begin
        grp_fu_318_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        grp_fu_322_p0 = reg_344;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_322_p0 = reg_337;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        grp_fu_322_p0 = reg_360;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_322_p0 = tmp_11_reg_1666;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_322_p0 = modulator_conversion;
    end else begin
        grp_fu_322_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_322_p1 = carrier_conversion;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        grp_fu_322_p1 = scale_factor_read_reg_1575;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state99))) begin
        grp_fu_322_p1 = reg_350;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_322_p1 = modulator_phase_read_reg_1580;
    end else begin
        grp_fu_322_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        grp_fu_330_p0 = tmp_35_fu_1085_p1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_330_p0 = tmp_31_fu_623_p1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_330_p0 = position_loc_reg_294;
    end else begin
        grp_fu_330_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'd0 == tmp_s_fu_366_p2) & (1'd1 == tmp_2_fu_380_p2))) begin
        grp_fu_446_ap_start = 1'b1;
    end else begin
        grp_fu_446_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'd0 == tmp_s_fu_366_p2) & (1'd1 == tmp_2_fu_380_p2))) begin
        grp_fu_452_ap_start = 1'b1;
    end else begin
        grp_fu_452_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_998_ap_start = 1'b1;
    end else begin
        grp_fu_998_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        mask_table1_address0 = tmp_6_i1_fu_1126_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        mask_table1_address0 = tmp_6_i_fu_664_p1;
    end else begin
        mask_table1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state101))) begin
        mask_table1_ce0 = 1'b1;
    end else begin
        mask_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state139)) begin
        notes_address0 = gepindex271_cast_fu_1532_p1;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        notes_address0 = gepindex2_cast_fu_1070_p1;
    end else begin
        notes_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state139))) begin
        notes_ce0 = 1'b1;
    end else begin
        notes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == result_V_1_sel)) begin
        result_V_1_data_out = result_V_1_payload_B;
    end else begin
        result_V_1_data_out = result_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state140) & (result_V_1_ack_in == 1'b1))) begin
        result_V_1_vld_in = 1'b1;
    end else begin
        result_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state140) | ((1'b1 == ap_CS_fsm_state141) & (1'd0 == tmp_s_reg_1590)))) begin
        result_V_TDATA_blk_n = result_V_1_state[1'd1];
    end else begin
        result_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sizes_ce0 = 1'b1;
    end else begin
        sizes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        sizes_ce1 = 1'b1;
    end else begin
        sizes_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state141) & (1'd0 == tmp_s_reg_1590))) begin
        storemerge_phi_fu_310_p4 = 1'd0;
    end else begin
        storemerge_phi_fu_310_p4 = storemerge_reg_306;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'd0 == tmp_s_fu_366_p2) & (1'd0 == tmp_2_fu_380_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'd0 == tmp_s_fu_366_p2) & (1'd1 == tmp_2_fu_380_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'd1 == tmp_s_fu_366_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state141;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            if (((1'b1 == ap_CS_fsm_state140) & (result_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state141;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state140;
            end
        end
        ap_ST_fsm_state141 : begin
            if (((1'b1 == ap_CS_fsm_state141) & ~((1'b0 == result_V_1_ack_in) | (1'b1 == ap_block_state141_io)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state141;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Conversion_address0 = tmp_10_fu_558_p1;

assign Conversion_address1 = tmp_8_fu_548_p1;

assign addrCmp1_fu_1504_p2 = ((mem_index_gep3_fu_1474_p2 < 14'd5248) ? 1'b1 : 1'b0);

assign addrCmp_fu_1042_p2 = ((mem_index_gep2_fu_1012_p2 < 14'd5248) ? 1'b1 : 1'b0);

assign adjSize61_cast_fu_1022_p1 = $unsigned(mem_index_gep16_cast_fu_1018_p1);

assign adjSize65_cast_fu_1484_p1 = $unsigned(mem_index_gep19_cast_fu_1480_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

always @ (*) begin
    ap_block_state141_io = ((1'd0 == tmp_s_reg_1590) & (1'b0 == result_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign gepindex1_fu_1054_p3 = ((icmp_fu_1036_p2[0:0] === 1'b1) ? gepindex_fu_1048_p2 : 17'd5243);

assign gepindex271_cast_fu_1532_p1 = $signed(gepindex5_fu_1524_p3);

assign gepindex2_cast_fu_1070_p1 = $signed(gepindex2_fu_1062_p3);

assign gepindex2_fu_1062_p3 = ((addrCmp_fu_1042_p2[0:0] === 1'b1) ? gepindex1_fu_1054_p3 : 17'd5243);

assign gepindex3_fu_1510_p2 = ($signed(17'd131068) + $signed(adjSize65_cast_fu_1484_p1));

assign gepindex4_fu_1516_p3 = ((icmp1_fu_1498_p2[0:0] === 1'b1) ? gepindex3_fu_1510_p2 : 17'd5243);

assign gepindex5_fu_1524_p3 = ((addrCmp1_fu_1504_p2[0:0] === 1'b1) ? gepindex4_fu_1516_p3 : 17'd5243);

assign gepindex_fu_1048_p2 = ($signed(17'd131068) + $signed(adjSize61_cast_fu_1022_p1));

assign grp_fu_1460_p0 = ((p_Result_48_reg_1788[0:0] === 1'b1) ? tmp_21_i_i_i1_fu_1439_p2 : tmp_18_i_i_i1_fu_1436_p1);

assign grp_fu_1460_p1 = grp_fu_1460_p10;

assign grp_fu_1460_p10 = car_size;

assign grp_fu_1547_p0 = 14'd437;

assign grp_fu_1547_p1 = grp_fu_446_p2[13:0];

assign grp_fu_1547_p2 = 14'd4;

assign grp_fu_1556_p0 = 14'd437;

assign grp_fu_1556_p1 = grp_fu_452_p2[13:0];

assign grp_fu_1556_p2 = 14'd4;

assign grp_fu_446_p1 = 32'd12;

assign grp_fu_452_p1 = 32'd12;

assign grp_fu_998_p0 = ((p_Result_43_reg_1709[0:0] === 1'b1) ? tmp_21_i_i_i_fu_977_p2 : tmp_18_i_i_i_fu_974_p1);

assign grp_fu_998_p1 = grp_fu_998_p10;

assign grp_fu_998_p10 = mod_size;

assign icmp1_fu_1498_p2 = ((tmp_55_fu_1488_p4 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_fu_1036_p2 = ((tmp_42_fu_1026_p4 != 12'd0) ? 1'b1 : 1'b0);

assign index_V_1_fu_1116_p4 = {{p_Val2_16_fu_1090_p1[57:52]}};

assign index_V_fu_654_p4 = {{p_Val2_s_fu_628_p1[57:52]}};

assign isNeg_1_fu_1356_p3 = sh_assign_2_fu_1350_p2[32'd11];

assign isNeg_fu_894_p3 = sh_assign_fu_888_p2[32'd11];

assign loc_V_10_fu_1318_p4 = {{p_Val2_24_fu_1307_p1[62:52]}};

assign loc_V_11_fu_1328_p1 = p_Val2_24_fu_1307_p1[51:0];

assign loc_V_1_fu_650_p1 = p_Val2_s_fu_628_p1[51:0];

assign loc_V_2_fu_735_p4 = {{p_Val2_5_fu_721_p2[62:52]}};

assign loc_V_3_fu_745_p1 = p_Val2_5_fu_721_p2[51:0];

assign loc_V_4_fu_856_p4 = {{p_Val2_9_fu_845_p1[62:52]}};

assign loc_V_5_fu_866_p1 = p_Val2_9_fu_845_p1[51:0];

assign loc_V_7_fu_1112_p1 = p_Val2_16_fu_1090_p1[51:0];

assign loc_V_8_fu_1197_p4 = {{p_Val2_20_fu_1183_p2[62:52]}};

assign loc_V_9_fu_1207_p1 = p_Val2_20_fu_1183_p2[51:0];

assign mask_i13_cast_fu_1161_p1 = mask_table1_q0;

assign mask_i_cast_fu_699_p1 = mask_table1_q0;

assign mem_index_gep16_cast_fu_1018_p1 = $signed(mem_index_gep2_fu_1012_p2);

assign mem_index_gep19_cast_fu_1480_p1 = $signed(mem_index_gep3_fu_1474_p2);

assign mem_index_gep2_fu_1012_p2 = (modulator_wave_value + tmp_41_fu_1004_p1);

assign mem_index_gep3_fu_1474_p2 = (carrier_wave_values_s + tmp_54_fu_1466_p1);

assign mul2_fu_394_p1 = modulator_wave;

assign mul2_fu_394_p2 = ($signed({{1'b0}, {65'd5726623062}}) * $signed(mul2_fu_394_p1));

assign mul_fu_422_p1 = carrier_wave;

assign mul_fu_422_p2 = ($signed({{1'b0}, {65'd5726623062}}) * $signed(mul_fu_422_p1));

assign neg_mul3_fu_458_p2 = (65'd0 - mul2_reg_1602);

assign neg_mul_fu_503_p2 = (65'd0 - mul_reg_1619);

assign neg_ti8_fu_479_p2 = (29'd0 - p_v_v_fu_473_p3);

assign neg_ti_fu_524_p2 = (29'd0 - p_v9_v_fu_518_p3);

assign or_cond_i9_fu_1155_p2 = (tmp_4_i7_fu_1145_p2 & tmp_9_i8_fu_1150_p2);

assign or_cond_i_fu_693_p2 = (tmp_4_i_fu_683_p2 & tmp_9_i_fu_688_p2);

assign p_Result_39_fu_703_p3 = {{p_Result_s_reg_1671}, {63'd0}};

assign p_Result_40_fu_714_p3 = {{1'd0}, {tmp_34_reg_1699}};

assign p_Result_41_fu_727_p3 = p_Val2_5_fu_721_p2[32'd63];

assign p_Result_42_fu_778_p4 = {{{xs_sign_V_9_fu_755_p2}, {xs_exp_V_7_fu_749_p3}}, {xs_sig_V_fu_772_p2}};

assign p_Result_44_fu_1165_p3 = {{p_Result_23_reg_1750}, {63'd0}};

assign p_Result_45_fu_1176_p3 = {{1'd0}, {tmp_47_reg_1778}};

assign p_Result_46_fu_1189_p3 = p_Val2_20_fu_1183_p2[32'd63];

assign p_Result_47_fu_1240_p4 = {{{xs_sign_V_10_fu_1217_p2}, {xs_exp_V_8_fu_1211_p3}}, {xs_sig_V_9_fu_1234_p2}};

assign p_Val2_11_fu_966_p3 = ((isNeg_fu_894_p3[0:0] === 1'b1) ? tmp_32_fu_952_p1 : tmp_33_fu_956_p4);

assign p_Val2_16_fu_1090_p1 = grp_fu_334_p1;

assign p_Val2_20_fu_1183_p2 = (mask_i13_cast_fu_1161_p1 + p_Result_45_fu_1176_p3);

assign p_Val2_24_fu_1307_p1 = x_assign_3_reg_1783;

assign p_Val2_26_fu_1428_p3 = ((isNeg_1_fu_1356_p3[0:0] === 1'b1) ? tmp_36_fu_1414_p1 : tmp_37_fu_1418_p4);

assign p_Val2_5_fu_721_p2 = (mask_i_cast_fu_699_p1 + p_Result_40_fu_714_p3);

assign p_Val2_9_fu_845_p1 = x_assign_1_reg_1704;

assign p_Val2_s_fu_628_p1 = grp_fu_334_p1;

assign p_v9_v_fu_518_p3 = ((tmp_17_reg_1624[0:0] === 1'b1) ? tmp_25_fu_508_p4 : tmp_26_reg_1630);

assign p_v_v_fu_473_p3 = ((tmp_1_reg_1607[0:0] === 1'b1) ? tmp_3_fu_463_p4 : tmp_5_reg_1613);

assign result_V_1_ack_in = result_V_1_state[1'd1];

assign result_V_1_ack_out = result_V_TREADY;

assign result_V_1_load_A = (result_V_1_state_cmp_full & ~result_V_1_sel_wr);

assign result_V_1_load_B = (result_V_1_sel_wr & result_V_1_state_cmp_full);

assign result_V_1_sel = result_V_1_sel_rd;

assign result_V_1_state_cmp_full = ((result_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign result_V_1_vld_out = result_V_1_state[1'd0];

assign result_V_TDATA = result_V_1_data_out;

assign result_V_TVALID = result_V_1_state[1'd0];

assign ret_i_i_i1_fu_1250_p1 = p_Result_47_fu_1240_p4;

assign ret_i_i_i_fu_788_p1 = p_Result_42_fu_778_p4;

assign ret_i_i_i_i1_fu_1172_p1 = p_Result_44_fu_1165_p3;

assign ret_i_i_i_i_fu_710_p1 = p_Result_39_fu_703_p3;

assign sel_tmp1_i1_fu_1259_p2 = (sel_tmp_i1_fu_1254_p2 & tmp_i5_fu_1135_p2);

assign sel_tmp1_i_fu_797_p2 = (sel_tmp_i_fu_792_p2 & tmp_i_fu_673_p2);

assign sel_tmp2_i1_fu_1265_p3 = ((sel_tmp1_i1_fu_1259_p2[0:0] === 1'b1) ? ret_i_i_i_i1_fu_1172_p1 : 64'd4607182418800017408);

assign sel_tmp2_i_fu_803_p3 = ((sel_tmp1_i_fu_797_p2[0:0] === 1'b1) ? ret_i_i_i_i_fu_710_p1 : 64'd4607182418800017408);

assign sel_tmp5_demorgan_i1_fu_1273_p2 = (tmp_i5_fu_1135_p2 | tmp_3_i6_fu_1140_p2);

assign sel_tmp5_demorgan_i_fu_811_p2 = (tmp_i_fu_673_p2 | tmp_3_i_fu_678_p2);

assign sel_tmp6_i1_fu_1279_p3 = ((sel_tmp5_demorgan_i1_fu_1273_p2[0:0] === 1'b1) ? sel_tmp2_i1_fu_1265_p3 : ret_i_i_i1_fu_1250_p1);

assign sel_tmp6_i_fu_817_p3 = ((sel_tmp5_demorgan_i_fu_811_p2[0:0] === 1'b1) ? sel_tmp2_i_fu_803_p3 : ret_i_i_i_fu_788_p1);

assign sel_tmp7_i1_fu_1287_p2 = (tmp_i5_fu_1135_p2 ^ 1'd1);

assign sel_tmp7_i_fu_825_p2 = (tmp_i_fu_673_p2 ^ 1'd1);

assign sel_tmp8_i1_fu_1293_p2 = (tmp_3_i6_fu_1140_p2 & sel_tmp7_i1_fu_1287_p2);

assign sel_tmp8_i_fu_831_p2 = (tmp_3_i_fu_678_p2 & sel_tmp7_i_fu_825_p2);

assign sel_tmp_i1_fu_1254_p2 = (p_Result_23_reg_1750 | or_cond_i9_fu_1155_p2);

assign sel_tmp_i_fu_792_p2 = (p_Result_s_reg_1671 | or_cond_i_fu_693_p2);

assign sh_assign_1_cast_fu_920_p1 = $signed(sh_assign_1_fu_912_p3);

assign sh_assign_1_fu_912_p3 = ((isNeg_fu_894_p3[0:0] === 1'b1) ? tmp_13_i_i_i_cast_fu_908_p1 : sh_assign_fu_888_p2);

assign sh_assign_2_fu_1350_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i9_cast_fu_1346_p1));

assign sh_assign_3_cast_fu_1382_p1 = $signed(sh_assign_3_fu_1374_p3);

assign sh_assign_3_fu_1374_p3 = ((isNeg_1_fu_1356_p3[0:0] === 1'b1) ? tmp_13_i_i_i1_cast_fu_1370_p1 : sh_assign_2_fu_1350_p2);

assign sh_assign_fu_888_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast_fu_884_p1));

assign sizes_address0 = tmp_8_fu_548_p1;

assign sizes_address1 = tmp_10_fu_558_p1;

assign storemerge_cast_fu_1537_p1 = storemerge_phi_fu_310_p4;

assign tmp_10_fu_558_p1 = $signed(grp_fu_452_p2);

assign tmp_13_i_i_i1_cast_fu_1370_p1 = $signed(tmp_13_i_i_i1_fu_1364_p2);

assign tmp_13_i_i_i1_fu_1364_p2 = (11'd1023 - loc_V_10_fu_1318_p4);

assign tmp_13_i_i_i_cast_fu_908_p1 = $signed(tmp_13_i_i_i_fu_902_p2);

assign tmp_13_i_i_i_fu_902_p2 = (11'd1023 - loc_V_4_fu_856_p4);

assign tmp_14_i_i_i1_cast_fu_1390_p1 = $unsigned(sh_assign_3_cast_fu_1382_p1);

assign tmp_14_i_i_i1_fu_1386_p1 = $unsigned(sh_assign_3_cast_fu_1382_p1);

assign tmp_14_i_i_i_cast_fu_928_p1 = $unsigned(sh_assign_1_cast_fu_920_p1);

assign tmp_14_i_i_i_fu_924_p1 = $unsigned(sh_assign_1_cast_fu_920_p1);

assign tmp_15_i_i_i1_fu_1394_p2 = tmp_i_i_i8_fu_1332_p4 >> tmp_14_i_i_i1_cast_fu_1390_p1;

assign tmp_15_i_i_i_fu_932_p2 = tmp_i_i_i_fu_870_p4 >> tmp_14_i_i_i_cast_fu_928_p1;

assign tmp_16_fu_485_p3 = ((tmp_1_reg_1607[0:0] === 1'b1) ? neg_ti8_fu_479_p2 : tmp_5_reg_1613);

assign tmp_16_i_i_i1_fu_1400_p2 = tmp_i_i_i8_cast_fu_1342_p1 << tmp_14_i_i_i1_fu_1386_p1;

assign tmp_16_i_i_i_fu_938_p2 = tmp_i_i_i_cast_fu_880_p1 << tmp_14_i_i_i_fu_924_p1;

assign tmp_18_i_i_i1_fu_1436_p1 = p_Val2_26_reg_1793;

assign tmp_18_i_i_i_fu_974_p1 = p_Val2_11_reg_1714;

assign tmp_21_i_i_i1_fu_1439_p2 = (32'd0 - tmp_18_i_i_i1_fu_1436_p1);

assign tmp_21_i_i_i_fu_977_p2 = (32'd0 - tmp_18_i_i_i_fu_974_p1);

assign tmp_25_fu_508_p4 = {{neg_mul_fu_503_p2[64:36]}};

assign tmp_27_fu_602_p2 = (32'd1 + position_loc_reg_294);

assign tmp_28_fu_530_p3 = ((tmp_17_reg_1624[0:0] === 1'b1) ? neg_ti_fu_524_p2 : tmp_26_reg_1630);

assign tmp_2_fu_380_p2 = ((tmp_fu_376_p1 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_31_fu_623_p1 = $signed(mod_octave);

assign tmp_32_fu_952_p1 = tmp_40_fu_944_p3;

assign tmp_33_fu_956_p4 = {{tmp_16_i_i_i_fu_938_p2[83:53]}};

assign tmp_34_fu_669_p1 = p_Val2_s_fu_628_p1[62:0];

assign tmp_35_fu_1085_p1 = $signed(car_octave);

assign tmp_36_fu_1414_p1 = tmp_53_fu_1406_p3;

assign tmp_37_fu_1418_p4 = {{tmp_16_i_i_i1_fu_1400_p2[83:53]}};

assign tmp_3_fu_463_p4 = {{neg_mul3_fu_458_p2[64:36]}};

assign tmp_3_i6_fu_1140_p2 = ((loc_V_6_reg_1759 > 11'd1075) ? 1'b1 : 1'b0);

assign tmp_3_i_fu_678_p2 = ((loc_V_reg_1680 > 11'd1075) ? 1'b1 : 1'b0);

assign tmp_40_fu_944_p3 = tmp_15_i_i_i_fu_932_p2[32'd53];

assign tmp_41_fu_1004_p1 = grp_fu_998_p2[13:0];

assign tmp_42_fu_1026_p4 = {{mem_index_gep2_fu_1012_p2[13:2]}};

assign tmp_47_fu_1131_p1 = p_Val2_16_fu_1090_p1[62:0];

assign tmp_4_fu_491_p2 = (29'd1 + tmp_16_fu_485_p3);

assign tmp_4_i7_fu_1145_p2 = ((loc_V_7_reg_1767 == 52'd0) ? 1'b1 : 1'b0);

assign tmp_4_i_fu_683_p2 = ((loc_V_1_reg_1688 == 52'd0) ? 1'b1 : 1'b0);

assign tmp_53_fu_1406_p3 = tmp_15_i_i_i1_fu_1394_p2[32'd53];

assign tmp_54_fu_1466_p1 = grp_fu_1460_p2[13:0];

assign tmp_55_fu_1488_p4 = {{mem_index_gep3_fu_1474_p2[13:2]}};

assign tmp_5_i1_fu_1228_p2 = (mask_table1_q0 ^ 52'd4503599627370495);

assign tmp_5_i_fu_766_p2 = (mask_table1_q0 ^ 52'd4503599627370495);

assign tmp_6_fu_536_p2 = (29'd1 + tmp_28_fu_530_p3);

assign tmp_6_i1_fu_1126_p1 = index_V_1_fu_1116_p4;

assign tmp_6_i_fu_664_p1 = index_V_fu_654_p4;

assign tmp_8_fu_548_p1 = $signed(grp_fu_446_p2);

assign tmp_9_i8_fu_1150_p2 = ((loc_V_6_reg_1759 == 11'd0) ? 1'b1 : 1'b0);

assign tmp_9_i_fu_688_p2 = ((loc_V_reg_1680 == 11'd0) ? 1'b1 : 1'b0);

assign tmp_fu_376_p1 = change[1:0];

assign tmp_i5_fu_1135_p2 = ((loc_V_6_reg_1759 < 11'd1023) ? 1'b1 : 1'b0);

assign tmp_i_fu_673_p2 = ((loc_V_reg_1680 < 11'd1023) ? 1'b1 : 1'b0);

assign tmp_i_i_i8_cast_fu_1342_p1 = tmp_i_i_i8_fu_1332_p4;

assign tmp_i_i_i8_fu_1332_p4 = {{{{1'd1}, {loc_V_11_fu_1328_p1}}}, {1'd0}};

assign tmp_i_i_i_cast_fu_880_p1 = tmp_i_i_i_fu_870_p4;

assign tmp_i_i_i_fu_870_p4 = {{{{1'd1}, {loc_V_5_fu_866_p1}}}, {1'd0}};

assign tmp_i_i_i_i9_cast_fu_1346_p1 = loc_V_10_fu_1318_p4;

assign tmp_i_i_i_i_cast_fu_884_p1 = loc_V_4_fu_856_p4;

assign tmp_s_fu_366_p2 = ((sync == 32'd0) ? 1'b1 : 1'b0);

assign x_assign_1_fu_837_p3 = ((sel_tmp8_i_fu_831_p2[0:0] === 1'b1) ? reg_356 : sel_tmp6_i_fu_817_p3);

assign x_assign_3_fu_1299_p3 = ((sel_tmp8_i1_fu_1293_p2[0:0] === 1'b1) ? reg_356 : sel_tmp6_i1_fu_1279_p3);

assign xs_exp_V_7_fu_749_p3 = ((p_Result_s_reg_1671[0:0] === 1'b1) ? loc_V_reg_1680 : loc_V_2_fu_735_p4);

assign xs_exp_V_8_fu_1211_p3 = ((p_Result_23_reg_1750[0:0] === 1'b1) ? loc_V_6_reg_1759 : loc_V_8_fu_1197_p4);

assign xs_sig_V_1_fu_760_p3 = ((p_Result_s_reg_1671[0:0] === 1'b1) ? loc_V_1_reg_1688 : loc_V_3_fu_745_p1);

assign xs_sig_V_4_fu_1222_p3 = ((p_Result_23_reg_1750[0:0] === 1'b1) ? loc_V_7_reg_1767 : loc_V_9_fu_1207_p1);

assign xs_sig_V_9_fu_1234_p2 = (xs_sig_V_4_fu_1222_p3 & tmp_5_i1_fu_1228_p2);

assign xs_sig_V_fu_772_p2 = (xs_sig_V_1_fu_760_p3 & tmp_5_i_fu_766_p2);

assign xs_sign_V_10_fu_1217_p2 = (p_Result_23_reg_1750 | p_Result_46_fu_1189_p3);

assign xs_sign_V_9_fu_755_p2 = (p_Result_s_reg_1671 | p_Result_41_fu_727_p3);

always @ (posedge ap_clk) begin
    change[31:1] <= 31'b0000000000000000000000000000000;
end

endmodule //FM_Synth
