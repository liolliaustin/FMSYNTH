-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FM_Synth is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    result_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_V_TVALID : OUT STD_LOGIC;
    result_V_TREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of FM_Synth is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FM_Synth,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485tffg1157-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.090900,HLS_SYN_LAT=62,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=18,HLS_SYN_FF=6804,HLS_SYN_LUT=6598}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (140 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (140 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (140 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (140 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (140 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (140 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (140 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (140 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (140 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (140 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (140 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (140 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (140 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv65_155555556 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101010101010101010101010101010110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv14_1480 : STD_LOGIC_VECTOR (13 downto 0) := "01010010000000";
    constant ap_const_lv17_1FFFC : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111100";
    constant ap_const_lv17_147B : STD_LOGIC_VECTOR (16 downto 0) := "00001010001111011";
    constant ap_const_lv14_1B5 : STD_LOGIC_VECTOR (13 downto 0) := "00000110110101";
    constant ap_const_lv14_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (140 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal result_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_vld_in : STD_LOGIC;
    signal result_V_1_vld_out : STD_LOGIC;
    signal result_V_1_ack_in : STD_LOGIC;
    signal result_V_1_ack_out : STD_LOGIC;
    signal result_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_sel_rd : STD_LOGIC := '0';
    signal result_V_1_sel_wr : STD_LOGIC := '0';
    signal result_V_1_sel : STD_LOGIC;
    signal result_V_1_load_A : STD_LOGIC;
    signal result_V_1_load_B : STD_LOGIC;
    signal result_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal result_V_1_state_cmp_full : STD_LOGIC;
    signal modulator_wave : STD_LOGIC_VECTOR (31 downto 0);
    signal modulator_phase : STD_LOGIC_VECTOR (31 downto 0);
    signal scale_factor : STD_LOGIC_VECTOR (31 downto 0);
    signal carrier_wave : STD_LOGIC_VECTOR (31 downto 0);
    signal carrier_phase : STD_LOGIC_VECTOR (31 downto 0);
    signal sync : STD_LOGIC_VECTOR (31 downto 0);
    signal change : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    signal position : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal mod_octave : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    signal car_octave : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    signal sizes_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sizes_ce0 : STD_LOGIC;
    signal sizes_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sizes_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sizes_ce1 : STD_LOGIC;
    signal sizes_q1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mod_size : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal car_size : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal carrier_wave_values_s : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal Conversion_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Conversion_ce0 : STD_LOGIC;
    signal Conversion_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Conversion_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Conversion_ce1 : STD_LOGIC;
    signal Conversion_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal carrier_conversion : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal modulator_wave_value : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal modulator_conversion : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal mask_table1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table1_ce0 : STD_LOGIC;
    signal mask_table1_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal notes_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal notes_ce0 : STD_LOGIC;
    signal notes_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal ap_CS_fsm_state141 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state141 : signal is "none";
    signal tmp_s_reg_1590 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal grp_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal grp_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal grp_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_356 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal carrier_phase_read_reg_1565 : STD_LOGIC_VECTOR (31 downto 0);
    signal scale_factor_read_reg_1575 : STD_LOGIC_VECTOR (31 downto 0);
    signal modulator_phase_read_reg_1580 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul2_fu_394_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul2_reg_1602 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_2_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1607 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1613 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_fu_422_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_reg_1619 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_17_reg_1624 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1630 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_31_fu_623_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_11_reg_1666 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_1671 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_reg_1680 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_1_fu_650_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_1688 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_34_fu_669_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_34_reg_1699 : STD_LOGIC_VECTOR (62 downto 0);
    signal x_assign_1_fu_837_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_1_reg_1704 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal p_Result_43_reg_1709 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal p_Val2_11_fu_966_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_11_reg_1714 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal grp_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_1740 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_1085_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal p_Result_23_reg_1750 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_6_reg_1759 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_7_fu_1112_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_7_reg_1767 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_47_fu_1131_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_47_reg_1778 : STD_LOGIC_VECTOR (62 downto 0);
    signal x_assign_3_fu_1299_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_3_reg_1783 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal p_Result_48_reg_1788 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal p_Val2_26_fu_1428_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_26_reg_1793 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal position_loc_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal storemerge_phi_fu_310_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_reg_306 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state141_io : BOOLEAN;
    signal tmp_8_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_i_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2_cast_fu_1070_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_i1_fu_1126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex271_cast_fu_1532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal storemerge_cast_fu_1537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_4_fu_491_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_6_fu_536_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1556_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1547_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_318_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal grp_fu_322_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal grp_fu_330_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_376_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul2_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_446_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_452_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal neg_mul3_fu_458_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_3_fu_463_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_v_v_fu_473_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal neg_ti8_fu_479_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_16_fu_485_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal neg_mul_fu_503_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_25_fu_508_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_v9_v_fu_518_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal neg_ti_fu_524_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_28_fu_530_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_V_fu_654_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_i_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_39_fu_703_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal mask_i_cast_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_40_fu_714_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_5_fu_721_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_2_fu_735_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_41_fu_727_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_3_fu_745_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sig_V_1_fu_760_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_5_i_fu_766_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sign_V_9_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_7_fu_749_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_V_fu_772_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_42_fu_778_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_cond_i_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_i_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_i_i_i_i_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_demorgan_i_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_fu_803_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_i_i_i_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp7_i_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_i_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_i_fu_817_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_9_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_5_fu_866_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_i_i_i_fu_870_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal loc_V_4_fu_856_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast_fu_884_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_888_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_i_i_i_fu_902_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_894_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_i_i_i_cast_fu_908_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_912_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_cast_fu_920_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_i_i_i_cast_fu_928_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_i_i_cast_fu_880_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_14_i_i_i_fu_924_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_15_i_i_i_fu_932_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_40_fu_944_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_i_i_i_fu_938_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_32_fu_952_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_33_fu_956_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_18_i_i_i_fu_974_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_i_i_i_fu_977_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_998_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_998_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_998_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_41_fu_1004_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_index_gep2_fu_1012_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_index_gep16_cast_fu_1018_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_fu_1026_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal adjSize61_cast_fu_1022_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex_fu_1048_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal addrCmp_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex1_fu_1054_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal gepindex2_fu_1062_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_16_fu_1090_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_V_1_fu_1116_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_i7_fu_1145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i8_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_44_fu_1165_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal mask_i13_cast_fu_1161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_45_fu_1176_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_20_fu_1183_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_8_fu_1197_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_46_fu_1189_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_9_fu_1207_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sig_V_4_fu_1222_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_5_i1_fu_1228_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sign_V_10_fu_1217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_8_fu_1211_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_V_9_fu_1234_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_47_fu_1240_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_cond_i9_fu_1155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i1_fu_1254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i5_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_i1_fu_1259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_i_i_i_i1_fu_1172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i6_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_demorgan_i1_fu_1273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i1_fu_1265_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_i_i_i1_fu_1250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp7_i1_fu_1287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_i1_fu_1293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_i1_fu_1279_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_24_fu_1307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_11_fu_1328_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_i_i_i8_fu_1332_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal loc_V_10_fu_1318_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i9_cast_fu_1346_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_2_fu_1350_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_i_i_i1_fu_1364_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_1356_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_i_i_i1_cast_fu_1370_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_fu_1374_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_cast_fu_1382_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_i_i_i1_cast_fu_1390_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_i_i8_cast_fu_1342_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_14_i_i_i1_fu_1386_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_15_i_i_i1_fu_1394_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_53_fu_1406_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_i_i_i1_fu_1400_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_36_fu_1414_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_37_fu_1418_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_18_i_i_i1_fu_1436_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_i_i_i1_fu_1439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1460_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1460_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1460_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_54_fu_1466_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_index_gep3_fu_1474_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_index_gep19_cast_fu_1480_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_55_fu_1488_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal adjSize65_cast_fu_1484_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp1_fu_1498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex3_fu_1510_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal addrCmp1_fu_1504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex4_fu_1516_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal gepindex5_fu_1524_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1547_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1547_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1547_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1556_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1556_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1556_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_446_ap_start : STD_LOGIC;
    signal grp_fu_446_ap_done : STD_LOGIC;
    signal grp_fu_452_ap_start : STD_LOGIC;
    signal grp_fu_452_ap_done : STD_LOGIC;
    signal grp_fu_998_ap_start : STD_LOGIC;
    signal grp_fu_998_ap_done : STD_LOGIC;
    signal grp_fu_1460_ap_start : STD_LOGIC;
    signal grp_fu_1460_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (140 downto 0);
    signal grp_fu_1460_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_998_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component FM_Synth_fadd_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FM_Synth_fmul_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FM_Synth_sitofp_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FM_Synth_fpext_32fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FM_Synth_srem_32ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FM_Synth_srem_32nhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component FM_Synth_mac_mulaibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component FM_Synth_sizes IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component FM_Synth_Conversion IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FM_Synth_mask_tabbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component FM_Synth_notes IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FM_Synth_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        modulator_wave : OUT STD_LOGIC_VECTOR (31 downto 0);
        modulator_phase : OUT STD_LOGIC_VECTOR (31 downto 0);
        scale_factor : OUT STD_LOGIC_VECTOR (31 downto 0);
        carrier_wave : OUT STD_LOGIC_VECTOR (31 downto 0);
        carrier_phase : OUT STD_LOGIC_VECTOR (31 downto 0);
        sync : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sizes_U : component FM_Synth_sizes
    generic map (
        DataWidth => 9,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sizes_address0,
        ce0 => sizes_ce0,
        q0 => sizes_q0,
        address1 => sizes_address1,
        ce1 => sizes_ce1,
        q1 => sizes_q1);

    Conversion_U : component FM_Synth_Conversion
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Conversion_address0,
        ce0 => Conversion_ce0,
        q0 => Conversion_q0,
        address1 => Conversion_address1,
        ce1 => Conversion_ce1,
        q1 => Conversion_q1);

    mask_table1_U : component FM_Synth_mask_tabbkb
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mask_table1_address0,
        ce0 => mask_table1_ce0,
        q0 => mask_table1_q0);

    notes_U : component FM_Synth_notes
    generic map (
        DataWidth => 32,
        AddressRange => 5244,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => notes_address0,
        ce0 => notes_ce0,
        q0 => notes_q0);

    FM_Synth_CTRL_BUS_s_axi_U : component FM_Synth_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        modulator_wave => modulator_wave,
        modulator_phase => modulator_phase,
        scale_factor => scale_factor,
        carrier_wave => carrier_wave,
        carrier_phase => carrier_phase,
        sync => sync);

    FM_Synth_fadd_32ncud_U1 : component FM_Synth_fadd_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_318_p0,
        din1 => grp_fu_318_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_318_p2);

    FM_Synth_fmul_32ndEe_U2 : component FM_Synth_fmul_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_322_p0,
        din1 => grp_fu_322_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_322_p2);

    FM_Synth_fmul_32ndEe_U3 : component FM_Synth_fmul_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => carrier_conversion,
        din1 => carrier_phase_read_reg_1565,
        ce => ap_const_logic_1,
        dout => grp_fu_326_p2);

    FM_Synth_sitofp_3eOg_U4 : component FM_Synth_sitofp_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_330_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_330_p1);

    FM_Synth_fpext_32fYi_U5 : component FM_Synth_fpext_32fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => reg_337,
        dout => grp_fu_334_p1);

    FM_Synth_srem_32ng8j_U6 : component FM_Synth_srem_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_446_ap_start,
        done => grp_fu_446_ap_done,
        din0 => modulator_wave,
        din1 => grp_fu_446_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_446_p2);

    FM_Synth_srem_32ng8j_U7 : component FM_Synth_srem_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_452_ap_start,
        done => grp_fu_452_ap_done,
        din0 => carrier_wave,
        din1 => grp_fu_452_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_452_p2);

    FM_Synth_srem_32nhbi_U8 : component FM_Synth_srem_32nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_998_ap_start,
        done => grp_fu_998_ap_done,
        din0 => grp_fu_998_p0,
        din1 => grp_fu_998_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_998_p2);

    FM_Synth_srem_32nhbi_U9 : component FM_Synth_srem_32nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1460_ap_start,
        done => grp_fu_1460_ap_done,
        din0 => grp_fu_1460_p0,
        din1 => grp_fu_1460_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1460_p2);

    FM_Synth_mac_mulaibs_U10 : component FM_Synth_mac_mulaibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 14,
        din2_WIDTH => 4,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_1547_p0,
        din1 => grp_fu_1547_p1,
        din2 => grp_fu_1547_p2,
        dout => grp_fu_1547_p3);

    FM_Synth_mac_mulaibs_U11 : component FM_Synth_mac_mulaibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 14,
        din2_WIDTH => 4,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_1556_p0,
        din1 => grp_fu_1556_p1,
        din2 => grp_fu_1556_p2,
        dout => grp_fu_1556_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    result_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                result_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = result_V_1_ack_out) and (ap_const_logic_1 = result_V_1_vld_out))) then 
                                        result_V_1_sel_rd <= not(result_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    result_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                result_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = result_V_1_vld_in) and (ap_const_logic_1 = result_V_1_ack_in))) then 
                                        result_V_1_sel_wr <= not(result_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    result_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                result_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = result_V_1_vld_in) and (ap_const_logic_1 = result_V_1_ack_out) and (result_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = result_V_1_vld_in) and (result_V_1_state = ap_const_lv2_2)))) then 
                    result_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = result_V_1_vld_in) and (ap_const_logic_0 = result_V_1_ack_out) and (result_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = result_V_1_ack_out) and (result_V_1_state = ap_const_lv2_1)))) then 
                    result_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = result_V_1_vld_in) and (result_V_1_state = ap_const_lv2_2)) or ((ap_const_logic_1 = result_V_1_ack_out) and (result_V_1_state = ap_const_lv2_1)) or ((result_V_1_state = ap_const_lv2_3) and not(((ap_const_logic_1 = result_V_1_vld_in) and (ap_const_logic_0 = result_V_1_ack_out))) and not(((ap_const_logic_0 = result_V_1_vld_in) and (ap_const_logic_1 = result_V_1_ack_out)))))) then 
                    result_V_1_state <= ap_const_lv2_3;
                else 
                    result_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    position_loc_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_lv1_0 = tmp_s_fu_366_p2) and (ap_const_lv1_0 = tmp_2_fu_380_p2))) then 
                position_loc_reg_294 <= position;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                position_loc_reg_294 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_lv1_1 = tmp_s_fu_366_p2))) then 
                storemerge_reg_306 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state141) and (ap_const_lv1_0 = tmp_s_reg_1590) and not(((ap_const_logic_0 = result_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state141_io))))) then 
                storemerge_reg_306 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                car_octave <= tmp_6_fu_536_p2;
                mod_octave <= tmp_4_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                car_size <= sizes_q1;
                carrier_conversion <= Conversion_q0;
                mod_size <= sizes_q0;
                modulator_conversion <= Conversion_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                carrier_phase_read_reg_1565 <= carrier_phase;
                modulator_phase_read_reg_1580 <= modulator_phase;
                scale_factor_read_reg_1575 <= scale_factor;
                tmp_s_reg_1590 <= tmp_s_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                carrier_wave_values_s <= grp_fu_1556_p3;
                modulator_wave_value <= grp_fu_1547_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state141) and not(((ap_const_logic_0 = result_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state141_io))))) then
                    change(0) <= storemerge_cast_fu_1537_p1(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                loc_V_1_reg_1688 <= loc_V_1_fu_650_p1;
                loc_V_reg_1680 <= p_Val2_s_fu_628_p1(62 downto 52);
                p_Result_s_reg_1671 <= p_Val2_s_fu_628_p1(63 downto 63);
                tmp_34_reg_1699 <= tmp_34_fu_669_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state101)) then
                loc_V_6_reg_1759 <= p_Val2_16_fu_1090_p1(62 downto 52);
                loc_V_7_reg_1767 <= loc_V_7_fu_1112_p1;
                p_Result_23_reg_1750 <= p_Val2_16_fu_1090_p1(63 downto 63);
                tmp_47_reg_1778 <= tmp_47_fu_1131_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_lv1_0 = tmp_s_fu_366_p2) and (ap_const_lv1_1 = tmp_2_fu_380_p2))) then
                mul2_reg_1602 <= mul2_fu_394_p2;
                mul_reg_1619 <= mul_fu_422_p2;
                tmp_17_reg_1624 <= carrier_wave(31 downto 31);
                tmp_1_reg_1607 <= modulator_wave(31 downto 31);
                tmp_26_reg_1630 <= mul_fu_422_p2(64 downto 36);
                tmp_5_reg_1613 <= mul2_fu_394_p2(64 downto 36);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                p_Result_43_reg_1709 <= p_Val2_9_fu_845_p1(63 downto 63);
                p_Val2_11_reg_1714 <= p_Val2_11_fu_966_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                p_Result_48_reg_1788 <= p_Val2_24_fu_1307_p1(63 downto 63);
                p_Val2_26_reg_1793 <= p_Val2_26_fu_1428_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                position <= tmp_27_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state100))) then
                reg_337 <= grp_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state98))) then
                reg_344 <= grp_fu_330_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state94))) then
                reg_350 <= grp_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state101))) then
                reg_356 <= grp_fu_334_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state140) and (result_V_1_ack_in = ap_const_logic_1)))) then
                reg_360 <= notes_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = result_V_1_load_A)) then
                result_V_1_payload_A <= notes_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = result_V_1_load_B)) then
                result_V_1_payload_B <= notes_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                tmp_11_reg_1666 <= grp_fu_330_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then
                tmp_21_reg_1740 <= grp_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                x_assign_1_reg_1704 <= x_assign_1_fu_837_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then
                x_assign_3_reg_1783 <= x_assign_3_fu_1299_p3;
            end if;
        end if;
    end process;
    change(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, result_V_1_ack_in, ap_CS_fsm_state140, ap_CS_fsm_state141, tmp_s_fu_366_p2, tmp_2_fu_380_p2, ap_block_state141_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_lv1_0 = tmp_s_fu_366_p2) and (ap_const_lv1_0 = tmp_2_fu_380_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_lv1_0 = tmp_s_fu_366_p2) and (ap_const_lv1_1 = tmp_2_fu_380_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_lv1_1 = tmp_s_fu_366_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state141;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state140) and (result_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state141;
                else
                    ap_NS_fsm <= ap_ST_fsm_state140;
                end if;
            when ap_ST_fsm_state141 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state141) and not(((ap_const_logic_0 = result_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state141_io))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state141;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Conversion_address0 <= tmp_10_fu_558_p1(4 - 1 downto 0);
    Conversion_address1 <= tmp_8_fu_548_p1(4 - 1 downto 0);

    Conversion_ce0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            Conversion_ce0 <= ap_const_logic_1;
        else 
            Conversion_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Conversion_ce1_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            Conversion_ce1 <= ap_const_logic_1;
        else 
            Conversion_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    addrCmp1_fu_1504_p2 <= "1" when (unsigned(mem_index_gep3_fu_1474_p2) < unsigned(ap_const_lv14_1480)) else "0";
    addrCmp_fu_1042_p2 <= "1" when (unsigned(mem_index_gep2_fu_1012_p2) < unsigned(ap_const_lv14_1480)) else "0";
    adjSize61_cast_fu_1022_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_index_gep16_cast_fu_1018_p1),17));
    adjSize65_cast_fu_1484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_index_gep19_cast_fu_1480_p1),17));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state139 <= ap_CS_fsm(138);
    ap_CS_fsm_state140 <= ap_CS_fsm(139);
    ap_CS_fsm_state141 <= ap_CS_fsm(140);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_block_state141_io_assign_proc : process(result_V_1_ack_in, tmp_s_reg_1590)
    begin
                ap_block_state141_io <= ((ap_const_lv1_0 = tmp_s_reg_1590) and (ap_const_logic_0 = result_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(result_V_1_ack_in, ap_CS_fsm_state141, ap_block_state141_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state141) and not(((ap_const_logic_0 = result_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state141_io))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(result_V_1_ack_in, ap_CS_fsm_state141, ap_block_state141_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state141) and not(((ap_const_logic_0 = result_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state141_io))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    gepindex1_fu_1054_p3 <= 
        gepindex_fu_1048_p2 when (icmp_fu_1036_p2(0) = '1') else 
        ap_const_lv17_147B;
        gepindex271_cast_fu_1532_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gepindex5_fu_1524_p3),64));

        gepindex2_cast_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gepindex2_fu_1062_p3),64));

    gepindex2_fu_1062_p3 <= 
        gepindex1_fu_1054_p3 when (addrCmp_fu_1042_p2(0) = '1') else 
        ap_const_lv17_147B;
    gepindex3_fu_1510_p2 <= std_logic_vector(signed(ap_const_lv17_1FFFC) + signed(adjSize65_cast_fu_1484_p1));
    gepindex4_fu_1516_p3 <= 
        gepindex3_fu_1510_p2 when (icmp1_fu_1498_p2(0) = '1') else 
        ap_const_lv17_147B;
    gepindex5_fu_1524_p3 <= 
        gepindex4_fu_1516_p3 when (addrCmp1_fu_1504_p2(0) = '1') else 
        ap_const_lv17_147B;
    gepindex_fu_1048_p2 <= std_logic_vector(signed(ap_const_lv17_1FFFC) + signed(adjSize61_cast_fu_1022_p1));

    grp_fu_1460_ap_start_assign_proc : process(ap_CS_fsm_state104)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            grp_fu_1460_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1460_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1460_p0 <= 
        tmp_21_i_i_i1_fu_1439_p2 when (p_Result_48_reg_1788(0) = '1') else 
        tmp_18_i_i_i1_fu_1436_p1;
    grp_fu_1460_p1 <= grp_fu_1460_p10(10 - 1 downto 0);
    grp_fu_1460_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(car_size),32));
    grp_fu_1547_p0 <= ap_const_lv14_1B5(10 - 1 downto 0);
    grp_fu_1547_p1 <= grp_fu_446_p2(14 - 1 downto 0);
    grp_fu_1547_p2 <= ap_const_lv14_4(4 - 1 downto 0);
    grp_fu_1556_p0 <= ap_const_lv14_1B5(10 - 1 downto 0);
    grp_fu_1556_p1 <= grp_fu_452_p2(14 - 1 downto 0);
    grp_fu_1556_p2 <= ap_const_lv14_4(4 - 1 downto 0);

    grp_fu_318_p0_assign_proc : process(reg_337, reg_350, ap_CS_fsm_state41, ap_CS_fsm_state91, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_fu_318_p0 <= reg_350;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
            grp_fu_318_p0 <= reg_337;
        else 
            grp_fu_318_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_318_p1_assign_proc : process(reg_344, tmp_21_reg_1740, ap_CS_fsm_state41, ap_CS_fsm_state91, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_fu_318_p1 <= tmp_21_reg_1740;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            grp_fu_318_p1 <= reg_344;
        else 
            grp_fu_318_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_322_p0_assign_proc : process(modulator_conversion, reg_337, reg_344, reg_360, ap_CS_fsm_state39, tmp_11_reg_1666, ap_CS_fsm_state89, ap_CS_fsm_state45, ap_CS_fsm_state87, ap_CS_fsm_state99)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_fu_322_p0 <= reg_344;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_fu_322_p0 <= reg_337;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_fu_322_p0 <= reg_360;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_322_p0 <= tmp_11_reg_1666;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_322_p0 <= modulator_conversion;
        else 
            grp_fu_322_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_322_p1_assign_proc : process(carrier_conversion, reg_350, scale_factor_read_reg_1575, modulator_phase_read_reg_1580, ap_CS_fsm_state39, ap_CS_fsm_state89, ap_CS_fsm_state45, ap_CS_fsm_state87, ap_CS_fsm_state99)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_fu_322_p1 <= carrier_conversion;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_fu_322_p1 <= scale_factor_read_reg_1575;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            grp_fu_322_p1 <= reg_350;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_322_p1 <= modulator_phase_read_reg_1580;
        else 
            grp_fu_322_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_330_p0_assign_proc : process(tmp_31_fu_623_p1, ap_CS_fsm_state42, tmp_35_fu_1085_p1, ap_CS_fsm_state96, position_loc_reg_294, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_fu_330_p0 <= tmp_35_fu_1085_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_330_p0 <= tmp_31_fu_623_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_330_p0 <= position_loc_reg_294;
        else 
            grp_fu_330_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_446_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_s_fu_366_p2, tmp_2_fu_380_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_lv1_0 = tmp_s_fu_366_p2) and (ap_const_lv1_1 = tmp_2_fu_380_p2))) then 
            grp_fu_446_ap_start <= ap_const_logic_1;
        else 
            grp_fu_446_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_446_p1 <= ap_const_lv32_C(5 - 1 downto 0);

    grp_fu_452_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_s_fu_366_p2, tmp_2_fu_380_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_lv1_0 = tmp_s_fu_366_p2) and (ap_const_lv1_1 = tmp_2_fu_380_p2))) then 
            grp_fu_452_ap_start <= ap_const_logic_1;
        else 
            grp_fu_452_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_452_p1 <= ap_const_lv32_C(5 - 1 downto 0);

    grp_fu_998_ap_start_assign_proc : process(ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_998_ap_start <= ap_const_logic_1;
        else 
            grp_fu_998_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_998_p0 <= 
        tmp_21_i_i_i_fu_977_p2 when (p_Result_43_reg_1709(0) = '1') else 
        tmp_18_i_i_i_fu_974_p1;
    grp_fu_998_p1 <= grp_fu_998_p10(10 - 1 downto 0);
    grp_fu_998_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mod_size),32));
    icmp1_fu_1498_p2 <= "0" when (tmp_55_fu_1488_p4 = ap_const_lv12_0) else "1";
    icmp_fu_1036_p2 <= "0" when (tmp_42_fu_1026_p4 = ap_const_lv12_0) else "1";
    index_V_1_fu_1116_p4 <= p_Val2_16_fu_1090_p1(57 downto 52);
    index_V_fu_654_p4 <= p_Val2_s_fu_628_p1(57 downto 52);
    isNeg_1_fu_1356_p3 <= sh_assign_2_fu_1350_p2(11 downto 11);
    isNeg_fu_894_p3 <= sh_assign_fu_888_p2(11 downto 11);
    loc_V_10_fu_1318_p4 <= p_Val2_24_fu_1307_p1(62 downto 52);
    loc_V_11_fu_1328_p1 <= p_Val2_24_fu_1307_p1(52 - 1 downto 0);
    loc_V_1_fu_650_p1 <= p_Val2_s_fu_628_p1(52 - 1 downto 0);
    loc_V_2_fu_735_p4 <= p_Val2_5_fu_721_p2(62 downto 52);
    loc_V_3_fu_745_p1 <= p_Val2_5_fu_721_p2(52 - 1 downto 0);
    loc_V_4_fu_856_p4 <= p_Val2_9_fu_845_p1(62 downto 52);
    loc_V_5_fu_866_p1 <= p_Val2_9_fu_845_p1(52 - 1 downto 0);
    loc_V_7_fu_1112_p1 <= p_Val2_16_fu_1090_p1(52 - 1 downto 0);
    loc_V_8_fu_1197_p4 <= p_Val2_20_fu_1183_p2(62 downto 52);
    loc_V_9_fu_1207_p1 <= p_Val2_20_fu_1183_p2(52 - 1 downto 0);
    mask_i13_cast_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mask_table1_q0),64));
    mask_i_cast_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mask_table1_q0),64));

    mask_table1_address0_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state101, tmp_6_i_fu_664_p1, tmp_6_i1_fu_1126_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            mask_table1_address0 <= tmp_6_i1_fu_1126_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            mask_table1_address0 <= tmp_6_i_fu_664_p1(6 - 1 downto 0);
        else 
            mask_table1_address0 <= "XXXXXX";
        end if; 
    end process;


    mask_table1_ce0_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            mask_table1_ce0 <= ap_const_logic_1;
        else 
            mask_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        mem_index_gep16_cast_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mem_index_gep2_fu_1012_p2),16));

        mem_index_gep19_cast_fu_1480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mem_index_gep3_fu_1474_p2),16));

    mem_index_gep2_fu_1012_p2 <= std_logic_vector(unsigned(modulator_wave_value) + unsigned(tmp_41_fu_1004_p1));
    mem_index_gep3_fu_1474_p2 <= std_logic_vector(unsigned(carrier_wave_values_s) + unsigned(tmp_54_fu_1466_p1));
    mul2_fu_394_p1 <= modulator_wave;
    mul2_fu_394_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv65_155555556) * signed(mul2_fu_394_p1))), 65));
    mul_fu_422_p1 <= carrier_wave;
    mul_fu_422_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv65_155555556) * signed(mul_fu_422_p1))), 65));
    neg_mul3_fu_458_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul2_reg_1602));
    neg_mul_fu_503_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_reg_1619));
    neg_ti8_fu_479_p2 <= std_logic_vector(unsigned(ap_const_lv29_0) - unsigned(p_v_v_fu_473_p3));
    neg_ti_fu_524_p2 <= std_logic_vector(unsigned(ap_const_lv29_0) - unsigned(p_v9_v_fu_518_p3));

    notes_address0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state139, gepindex2_cast_fu_1070_p1, gepindex271_cast_fu_1532_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state139)) then 
            notes_address0 <= gepindex271_cast_fu_1532_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            notes_address0 <= gepindex2_cast_fu_1070_p1(13 - 1 downto 0);
        else 
            notes_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    notes_ce0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state139)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state139))) then 
            notes_ce0 <= ap_const_logic_1;
        else 
            notes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_i9_fu_1155_p2 <= (tmp_4_i7_fu_1145_p2 and tmp_9_i8_fu_1150_p2);
    or_cond_i_fu_693_p2 <= (tmp_4_i_fu_683_p2 and tmp_9_i_fu_688_p2);
    p_Result_39_fu_703_p3 <= (p_Result_s_reg_1671 & ap_const_lv63_0);
    p_Result_40_fu_714_p3 <= (ap_const_lv1_0 & tmp_34_reg_1699);
    p_Result_41_fu_727_p3 <= p_Val2_5_fu_721_p2(63 downto 63);
    p_Result_42_fu_778_p4 <= ((xs_sign_V_9_fu_755_p2 & xs_exp_V_7_fu_749_p3) & xs_sig_V_fu_772_p2);
    p_Result_44_fu_1165_p3 <= (p_Result_23_reg_1750 & ap_const_lv63_0);
    p_Result_45_fu_1176_p3 <= (ap_const_lv1_0 & tmp_47_reg_1778);
    p_Result_46_fu_1189_p3 <= p_Val2_20_fu_1183_p2(63 downto 63);
    p_Result_47_fu_1240_p4 <= ((xs_sign_V_10_fu_1217_p2 & xs_exp_V_8_fu_1211_p3) & xs_sig_V_9_fu_1234_p2);
    p_Val2_11_fu_966_p3 <= 
        tmp_32_fu_952_p1 when (isNeg_fu_894_p3(0) = '1') else 
        tmp_33_fu_956_p4;
    p_Val2_16_fu_1090_p1 <= grp_fu_334_p1;
    p_Val2_20_fu_1183_p2 <= std_logic_vector(unsigned(mask_i13_cast_fu_1161_p1) + unsigned(p_Result_45_fu_1176_p3));
    p_Val2_24_fu_1307_p1 <= x_assign_3_reg_1783;
    p_Val2_26_fu_1428_p3 <= 
        tmp_36_fu_1414_p1 when (isNeg_1_fu_1356_p3(0) = '1') else 
        tmp_37_fu_1418_p4;
    p_Val2_5_fu_721_p2 <= std_logic_vector(unsigned(mask_i_cast_fu_699_p1) + unsigned(p_Result_40_fu_714_p3));
    p_Val2_9_fu_845_p1 <= x_assign_1_reg_1704;
    p_Val2_s_fu_628_p1 <= grp_fu_334_p1;
    p_v9_v_fu_518_p3 <= 
        tmp_25_fu_508_p4 when (tmp_17_reg_1624(0) = '1') else 
        tmp_26_reg_1630;
    p_v_v_fu_473_p3 <= 
        tmp_3_fu_463_p4 when (tmp_1_reg_1607(0) = '1') else 
        tmp_5_reg_1613;
    result_V_1_ack_in <= result_V_1_state(1);
    result_V_1_ack_out <= result_V_TREADY;

    result_V_1_data_out_assign_proc : process(result_V_1_payload_A, result_V_1_payload_B, result_V_1_sel)
    begin
        if ((ap_const_logic_1 = result_V_1_sel)) then 
            result_V_1_data_out <= result_V_1_payload_B;
        else 
            result_V_1_data_out <= result_V_1_payload_A;
        end if; 
    end process;

    result_V_1_load_A <= (result_V_1_state_cmp_full and not(result_V_1_sel_wr));
    result_V_1_load_B <= (result_V_1_sel_wr and result_V_1_state_cmp_full);
    result_V_1_sel <= result_V_1_sel_rd;
    result_V_1_state_cmp_full <= '0' when (result_V_1_state = ap_const_lv2_1) else '1';

    result_V_1_vld_in_assign_proc : process(result_V_1_ack_in, ap_CS_fsm_state140)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state140) and (result_V_1_ack_in = ap_const_logic_1))) then 
            result_V_1_vld_in <= ap_const_logic_1;
        else 
            result_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    result_V_1_vld_out <= result_V_1_state(0);
    result_V_TDATA <= result_V_1_data_out;

    result_V_TDATA_blk_n_assign_proc : process(result_V_1_state, ap_CS_fsm_state140, ap_CS_fsm_state141, tmp_s_reg_1590)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state140) or ((ap_const_logic_1 = ap_CS_fsm_state141) and (ap_const_lv1_0 = tmp_s_reg_1590)))) then 
            result_V_TDATA_blk_n <= result_V_1_state(1);
        else 
            result_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    result_V_TVALID <= result_V_1_state(0);
    ret_i_i_i1_fu_1250_p1 <= p_Result_47_fu_1240_p4;
    ret_i_i_i_fu_788_p1 <= p_Result_42_fu_778_p4;
    ret_i_i_i_i1_fu_1172_p1 <= p_Result_44_fu_1165_p3;
    ret_i_i_i_i_fu_710_p1 <= p_Result_39_fu_703_p3;
    sel_tmp1_i1_fu_1259_p2 <= (sel_tmp_i1_fu_1254_p2 and tmp_i5_fu_1135_p2);
    sel_tmp1_i_fu_797_p2 <= (sel_tmp_i_fu_792_p2 and tmp_i_fu_673_p2);
    sel_tmp2_i1_fu_1265_p3 <= 
        ret_i_i_i_i1_fu_1172_p1 when (sel_tmp1_i1_fu_1259_p2(0) = '1') else 
        ap_const_lv64_3FF0000000000000;
    sel_tmp2_i_fu_803_p3 <= 
        ret_i_i_i_i_fu_710_p1 when (sel_tmp1_i_fu_797_p2(0) = '1') else 
        ap_const_lv64_3FF0000000000000;
    sel_tmp5_demorgan_i1_fu_1273_p2 <= (tmp_i5_fu_1135_p2 or tmp_3_i6_fu_1140_p2);
    sel_tmp5_demorgan_i_fu_811_p2 <= (tmp_i_fu_673_p2 or tmp_3_i_fu_678_p2);
    sel_tmp6_i1_fu_1279_p3 <= 
        sel_tmp2_i1_fu_1265_p3 when (sel_tmp5_demorgan_i1_fu_1273_p2(0) = '1') else 
        ret_i_i_i1_fu_1250_p1;
    sel_tmp6_i_fu_817_p3 <= 
        sel_tmp2_i_fu_803_p3 when (sel_tmp5_demorgan_i_fu_811_p2(0) = '1') else 
        ret_i_i_i_fu_788_p1;
    sel_tmp7_i1_fu_1287_p2 <= (tmp_i5_fu_1135_p2 xor ap_const_lv1_1);
    sel_tmp7_i_fu_825_p2 <= (tmp_i_fu_673_p2 xor ap_const_lv1_1);
    sel_tmp8_i1_fu_1293_p2 <= (tmp_3_i6_fu_1140_p2 and sel_tmp7_i1_fu_1287_p2);
    sel_tmp8_i_fu_831_p2 <= (tmp_3_i_fu_678_p2 and sel_tmp7_i_fu_825_p2);
    sel_tmp_i1_fu_1254_p2 <= (p_Result_23_reg_1750 or or_cond_i9_fu_1155_p2);
    sel_tmp_i_fu_792_p2 <= (p_Result_s_reg_1671 or or_cond_i_fu_693_p2);
        sh_assign_1_cast_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_912_p3),32));

    sh_assign_1_fu_912_p3 <= 
        tmp_13_i_i_i_cast_fu_908_p1 when (isNeg_fu_894_p3(0) = '1') else 
        sh_assign_fu_888_p2;
    sh_assign_2_fu_1350_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i9_cast_fu_1346_p1));
        sh_assign_3_cast_fu_1382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_3_fu_1374_p3),32));

    sh_assign_3_fu_1374_p3 <= 
        tmp_13_i_i_i1_cast_fu_1370_p1 when (isNeg_1_fu_1356_p3(0) = '1') else 
        sh_assign_2_fu_1350_p2;
    sh_assign_fu_888_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast_fu_884_p1));
    sizes_address0 <= tmp_8_fu_548_p1(4 - 1 downto 0);
    sizes_address1 <= tmp_10_fu_558_p1(4 - 1 downto 0);

    sizes_ce0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sizes_ce0 <= ap_const_logic_1;
        else 
            sizes_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sizes_ce1_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sizes_ce1 <= ap_const_logic_1;
        else 
            sizes_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    storemerge_cast_fu_1537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(storemerge_phi_fu_310_p4),32));

    storemerge_phi_fu_310_p4_assign_proc : process(ap_CS_fsm_state141, tmp_s_reg_1590, storemerge_reg_306)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state141) and (ap_const_lv1_0 = tmp_s_reg_1590))) then 
            storemerge_phi_fu_310_p4 <= ap_const_lv1_0;
        else 
            storemerge_phi_fu_310_p4 <= storemerge_reg_306;
        end if; 
    end process;

        tmp_10_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_452_p2),64));

        tmp_13_i_i_i1_cast_fu_1370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_i_i_i1_fu_1364_p2),12));

    tmp_13_i_i_i1_fu_1364_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_10_fu_1318_p4));
        tmp_13_i_i_i_cast_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_i_i_i_fu_902_p2),12));

    tmp_13_i_i_i_fu_902_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_4_fu_856_p4));
    tmp_14_i_i_i1_cast_fu_1390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_3_cast_fu_1382_p1),54));
    tmp_14_i_i_i1_fu_1386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_3_cast_fu_1382_p1),137));
    tmp_14_i_i_i_cast_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_920_p1),54));
    tmp_14_i_i_i_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_920_p1),137));
    tmp_15_i_i_i1_fu_1394_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i_i8_fu_1332_p4),to_integer(unsigned('0' & tmp_14_i_i_i1_cast_fu_1390_p1(31-1 downto 0)))));
    tmp_15_i_i_i_fu_932_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i_i_fu_870_p4),to_integer(unsigned('0' & tmp_14_i_i_i_cast_fu_928_p1(31-1 downto 0)))));
    tmp_16_fu_485_p3 <= 
        neg_ti8_fu_479_p2 when (tmp_1_reg_1607(0) = '1') else 
        tmp_5_reg_1613;
    tmp_16_i_i_i1_fu_1400_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i8_cast_fu_1342_p1),to_integer(unsigned('0' & tmp_14_i_i_i1_fu_1386_p1(31-1 downto 0)))));
    tmp_16_i_i_i_fu_938_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i_cast_fu_880_p1),to_integer(unsigned('0' & tmp_14_i_i_i_fu_924_p1(31-1 downto 0)))));
    tmp_18_i_i_i1_fu_1436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_26_reg_1793),32));
    tmp_18_i_i_i_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_11_reg_1714),32));
    tmp_21_i_i_i1_fu_1439_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_18_i_i_i1_fu_1436_p1));
    tmp_21_i_i_i_fu_977_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_18_i_i_i_fu_974_p1));
    tmp_25_fu_508_p4 <= neg_mul_fu_503_p2(64 downto 36);
    tmp_27_fu_602_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(position_loc_reg_294));
    tmp_28_fu_530_p3 <= 
        neg_ti_fu_524_p2 when (tmp_17_reg_1624(0) = '1') else 
        tmp_26_reg_1630;
    tmp_2_fu_380_p2 <= "1" when (tmp_fu_376_p1 = ap_const_lv2_1) else "0";
        tmp_31_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mod_octave),32));

    tmp_32_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_944_p3),31));
    tmp_33_fu_956_p4 <= tmp_16_i_i_i_fu_938_p2(83 downto 53);
    tmp_34_fu_669_p1 <= p_Val2_s_fu_628_p1(63 - 1 downto 0);
        tmp_35_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(car_octave),32));

    tmp_36_fu_1414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_1406_p3),31));
    tmp_37_fu_1418_p4 <= tmp_16_i_i_i1_fu_1400_p2(83 downto 53);
    tmp_3_fu_463_p4 <= neg_mul3_fu_458_p2(64 downto 36);
    tmp_3_i6_fu_1140_p2 <= "1" when (unsigned(loc_V_6_reg_1759) > unsigned(ap_const_lv11_433)) else "0";
    tmp_3_i_fu_678_p2 <= "1" when (unsigned(loc_V_reg_1680) > unsigned(ap_const_lv11_433)) else "0";
    tmp_40_fu_944_p3 <= tmp_15_i_i_i_fu_932_p2(53 downto 53);
    tmp_41_fu_1004_p1 <= grp_fu_998_p2(14 - 1 downto 0);
    tmp_42_fu_1026_p4 <= mem_index_gep2_fu_1012_p2(13 downto 2);
    tmp_47_fu_1131_p1 <= p_Val2_16_fu_1090_p1(63 - 1 downto 0);
    tmp_4_fu_491_p2 <= std_logic_vector(unsigned(ap_const_lv29_1) + unsigned(tmp_16_fu_485_p3));
    tmp_4_i7_fu_1145_p2 <= "1" when (loc_V_7_reg_1767 = ap_const_lv52_0) else "0";
    tmp_4_i_fu_683_p2 <= "1" when (loc_V_1_reg_1688 = ap_const_lv52_0) else "0";
    tmp_53_fu_1406_p3 <= tmp_15_i_i_i1_fu_1394_p2(53 downto 53);
    tmp_54_fu_1466_p1 <= grp_fu_1460_p2(14 - 1 downto 0);
    tmp_55_fu_1488_p4 <= mem_index_gep3_fu_1474_p2(13 downto 2);
    tmp_5_i1_fu_1228_p2 <= (mask_table1_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
    tmp_5_i_fu_766_p2 <= (mask_table1_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
    tmp_6_fu_536_p2 <= std_logic_vector(unsigned(ap_const_lv29_1) + unsigned(tmp_28_fu_530_p3));
    tmp_6_i1_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_1_fu_1116_p4),64));
    tmp_6_i_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_fu_654_p4),64));
        tmp_8_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_446_p2),64));

    tmp_9_i8_fu_1150_p2 <= "1" when (loc_V_6_reg_1759 = ap_const_lv11_0) else "0";
    tmp_9_i_fu_688_p2 <= "1" when (loc_V_reg_1680 = ap_const_lv11_0) else "0";
    tmp_fu_376_p1 <= change(2 - 1 downto 0);
    tmp_i5_fu_1135_p2 <= "1" when (unsigned(loc_V_6_reg_1759) < unsigned(ap_const_lv11_3FF)) else "0";
    tmp_i_fu_673_p2 <= "1" when (unsigned(loc_V_reg_1680) < unsigned(ap_const_lv11_3FF)) else "0";
    tmp_i_i_i8_cast_fu_1342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_i8_fu_1332_p4),137));
    tmp_i_i_i8_fu_1332_p4 <= ((ap_const_lv1_1 & loc_V_11_fu_1328_p1) & ap_const_lv1_0);
    tmp_i_i_i_cast_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_i_fu_870_p4),137));
    tmp_i_i_i_fu_870_p4 <= ((ap_const_lv1_1 & loc_V_5_fu_866_p1) & ap_const_lv1_0);
    tmp_i_i_i_i9_cast_fu_1346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_10_fu_1318_p4),12));
    tmp_i_i_i_i_cast_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_4_fu_856_p4),12));
    tmp_s_fu_366_p2 <= "1" when (sync = ap_const_lv32_0) else "0";
    x_assign_1_fu_837_p3 <= 
        reg_356 when (sel_tmp8_i_fu_831_p2(0) = '1') else 
        sel_tmp6_i_fu_817_p3;
    x_assign_3_fu_1299_p3 <= 
        reg_356 when (sel_tmp8_i1_fu_1293_p2(0) = '1') else 
        sel_tmp6_i1_fu_1279_p3;
    xs_exp_V_7_fu_749_p3 <= 
        loc_V_reg_1680 when (p_Result_s_reg_1671(0) = '1') else 
        loc_V_2_fu_735_p4;
    xs_exp_V_8_fu_1211_p3 <= 
        loc_V_6_reg_1759 when (p_Result_23_reg_1750(0) = '1') else 
        loc_V_8_fu_1197_p4;
    xs_sig_V_1_fu_760_p3 <= 
        loc_V_1_reg_1688 when (p_Result_s_reg_1671(0) = '1') else 
        loc_V_3_fu_745_p1;
    xs_sig_V_4_fu_1222_p3 <= 
        loc_V_7_reg_1767 when (p_Result_23_reg_1750(0) = '1') else 
        loc_V_9_fu_1207_p1;
    xs_sig_V_9_fu_1234_p2 <= (xs_sig_V_4_fu_1222_p3 and tmp_5_i1_fu_1228_p2);
    xs_sig_V_fu_772_p2 <= (xs_sig_V_1_fu_760_p3 and tmp_5_i_fu_766_p2);
    xs_sign_V_10_fu_1217_p2 <= (p_Result_23_reg_1750 or p_Result_46_fu_1189_p3);
    xs_sign_V_9_fu_755_p2 <= (p_Result_s_reg_1671 or p_Result_41_fu_727_p3);
end behav;
